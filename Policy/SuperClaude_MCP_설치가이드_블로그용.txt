================================================================================
           SuperClaude 및 핵심 MCP 서버 설치 가이드
           tideWise 프로젝트 환경 설정 (블로그용)
           작성일: 2025-01-28
================================================================================

## 목차
1. SuperClaude 개요
2. 사전 준비사항
3. Claude CLI 설치
4. SuperClaude Framework 설치
5. 핵심 MCP 서버 설치
6. 설치 확인 및 문제 해결
7. 사용 예시

================================================================================
## 1. SuperClaude 개요
================================================================================

SuperClaude는 Claude Code의 고급 기능을 활용하는 확장 프레임워크입니다.
MCP(Model Context Protocol)를 통해 AI의 능력을 확장하여 다음과 같은 기능을 제공합니다:

- **최신 문서 실시간 조회** (Context7)
- **복잡한 문제의 단계별 분석** (Sequential Thinking)
- **브라우저 자동화 및 테스팅** (Playwright)
- **AI 기반 UI 컴포넌트 생성** (Magic)

================================================================================
## 2. 사전 준비사항
================================================================================

### 시스템 요구사항
- Node.js v18.0.0 이상 (권장: v22.17.0)
- npm v9.0.0 이상 (권장: v10.9.2)
- Claude CLI 최신 버전
- WSL2 (Windows 사용자의 경우)

### 환경 확인
설치 전에 시스템 환경을 확인해보겠습니다:

**예제 1: Node.js 버전 확인**
```bash
node --version
```

**예제 2: npm 버전 확인**
```bash
npm --version
```

**예제 3: 시스템 환경 확인 (Linux/WSL)**
```bash
uname -a
```

이 명령어들은 실제 터미널에서 실행하여 환경을 확인할 수 있습니다.

================================================================================
## 3. Claude CLI 설치
================================================================================

### Claude CLI 설치 과정

Claude CLI는 npm을 통해 전역 설치할 수 있습니다.

**예제 4: npm을 통한 전역 설치**
```bash
npm install -g @anthropic-ai/claude-code
```

**예제 5: 설치 확인**
```bash
claude --version
```

### Claude 초기 설정

설치 후 API 키 설정이 필요합니다.

**예제 6: API 키 설정**
```bash
claude auth login
```
(실제로는 Anthropic 콘솔에서 발급받은 API 키를 입력합니다)

**예제 7: 설정 확인**
```bash
claude config list
```

================================================================================
## 4. SuperClaude Framework 설치
================================================================================

### 주의사항
**Windows 사용자는 우분투 환경(WSL)을 관리자 모드로 실행하여 설치해야 합니다.**

### SuperClaude Framework 설치 과정

**예제 8: uv 패키지 매니저 설치 (필요한 경우)**
```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
```

**예제 9: 환경 확인 및 설치**
```bash
python3 --version && \
curl -LsSf https://astral.sh/uv/install.sh | sh && \
uv add SuperClaude && \
python3 -m SuperClaude install --profile developer
```

**예제 10: 설치 확인**
```bash
python3 --version && claude --version && echo "MCP 서버: $(claude mcp list | grep 'Connected' | wc -l)개" && claude /sc:index
```

위 명령어들은 순서대로 실행하면 SuperClaude Framework가 개발자 모드로 설치됩니다.

================================================================================
## 5. 핵심 MCP 서버 설치
================================================================================

### 5.1 Context7 MCP 설치

Context7는 최신 라이브러리 문서와 코드 예제를 실시간으로 제공하는 MCP 서버입니다.

**예제 11: Context7 설치 명령어**
```bash
claude mcp add context7 --scope user -- npx -y @upstash/context7-mcp@latest
```

**예제 12: Context7 설치 확인**
```bash
claude mcp list | grep context7
```

정상 설치 시 다음과 같은 출력을 볼 수 있습니다:
```
context7: npx -y @upstash/context7-mcp - ✓ Connected
```

**주요 기능:**
- 라이브러리 버전별 정확한 문서 제공
- 실시간 API 레퍼런스
- 코드 예제 및 베스트 프랙티스

### 5.2 Sequential Thinking MCP 설치

Sequential Thinking은 복잡한 문제를 단계별로 분석하고 해결하는 MCP 서버입니다.

**예제 13: Sequential Thinking 설치 명령어**
```bash
claude mcp add sequential-thinking --scope user -- npx -y @modelcontextprotocol/server-sequential-thinking
```

**예제 14: Sequential Thinking 설치 확인**
```bash
claude mcp list | grep sequential-thinking
```

정상 설치 시 출력 예시:
```
sequential-thinking: npx -y @modelcontextprotocol/server-sequential-thinking - ✓ Connected
```

**주요 기능:**
- 복잡한 문제의 체계적 분해
- 단계별 추론 및 검증
- 대안적 사고 경로 탐색
- 반성적 사고와 개선

### 5.3 Playwright MCP 설치

Playwright는 브라우저 자동화와 E2E 테스팅을 지원하는 MCP 서버입니다.

**예제 15: Playwright 설치 명령어**
```bash
claude mcp add playwright --scope user -- npx -y @playwright/mcp@latest
```

**예제 16: Playwright 설치 확인**
```bash
claude mcp list | grep playwright
```

정상 설치 시 출력 예시:
```
playwright: npx -y @playwright/mcp@latest - ✓ Connected
```

**주요 기능:**
- 웹 페이지 자동 탐색 및 상호작용
- 스크린샷 캡처 및 비교
- 크로스 브라우저 테스팅
- 성능 모니터링 및 분석

### 5.4 Magic MCP 설치 (API 키 필요)

Magic은 AI 기반 UI 컴포넌트 생성 도구입니다.

### API 키 발급 방법
1. https://21st.dev/magic/console 에 접속
2. 계정 생성 후 API 키 발급

**예제 17: Magic 설치 명령어 (일반)**
```bash
claude mcp add magic --scope user -e API_KEY="your-api-key-here" -- npx -y @21st-dev/magic
```
위 명령어에서 "your-api-key-here" 부분을 실제 발급받은 API 키로 교체해야 합니다.

**예제 18: Magic 설치 확인**
```bash
claude mcp list | grep magic
```

정상 설치 시 출력 예시:
```
magic: npx -y @21st-dev/magic - ✓ Connected
```

**주요 기능:**
- React/Vue/Angular 컴포넌트 생성
- 현대적 UI 디자인 자동 생성
- 로고 검색 및 삽입
- 기존 컴포넌트 개선 및 리팩토링

================================================================================
## 6. 설치 확인 및 문제 해결
================================================================================

### 전체 MCP 서버 상태 확인

**예제 19: 모든 MCP 서버 연결 상태 확인**
```bash
claude mcp list
```

정상 설치 시 예상 출력:
```
Checking MCP server health...

sequential-thinking: npx -y @modelcontextprotocol/server-sequential-thinking - ✓ Connected
context7: npx -y @upstash/context7-mcp - ✓ Connected
magic: npx -y @21st-dev/magic - ✓ Connected
playwright: npx -y @playwright/mcp@latest - ✓ Connected
```

### 디버그 모드로 상세 확인

**예제 20: Claude 디버그 모드 실행**
```bash
claude --debug
```

디버그 모드에서는 다음 명령어로 MCP 상태를 확인할 수 있습니다:
```
/mcp
```

### 개별 MCP 서버 테스트

**예제 21: 타임아웃과 함께 디버그 실행**
```bash
timeout 120 claude --debug 2>&1 | grep -E "(sequential-thinking|context7|magic|playwright)"
```

================================================================================
## 문제 해결 가이드
================================================================================

### MCP 서버가 연결되지 않는 경우

**1. Node.js 버전 확인**

**예제 22: Node.js 버전 확인**
```bash
node --version
```
v18 이상이 필요합니다.

**2. MCP 서버 재설치**

**예제 23: 문제가 있는 서버 제거**
```bash
claude mcp remove [서버명]
```

**예제 24: 서버 재설치**
```bash
claude mcp add [서버명] --scope user -- npx -y [패키지명]
```

**3. 설정 파일 직접 확인**

**예제 25: WSL/Linux에서 설정 파일 확인**
```bash
cat ~/.claude.json | grep -A 5 [서버명]
```

**예제 26: Windows에서 설정 파일 확인**
```cmd
type %USERPROFILE%\.claude.json | findstr /A:5 [서버명]
```

### API 키 관련 문제 (Magic MCP)

**1. API 키 재설정**

**예제 27: Magic MCP 제거**
```bash
claude mcp remove magic
```

**예제 28: 새 API 키로 재설치**
```bash
claude mcp add magic --scope user -e API_KEY="새로운-API-키" -- npx -y @21st-dev/magic
```

**2. 환경 변수 확인**

**예제 29: 설정 파일에서 API 키 확인**
```bash
grep -A 3 "magic" ~/.claude.json
```

### 연결 타임아웃 문제

**1. 타임아웃 설정 증가**

**예제 30: 타임아웃 환경 변수 설정**
```bash
export MCP_TIMEOUT=10000
```

**2. 네트워크 프록시 설정 (필요시)**

**예제 31: 프록시 환경 변수 설정**
```bash
export HTTP_PROXY=http://your-proxy:port
export HTTPS_PROXY=http://your-proxy:port
```

================================================================================
## 7. 사용 예시
================================================================================

설치가 완료되면 다음과 같은 방식으로 SuperClaude의 각 기능을 활용할 수 있습니다:

### Context7 사용 예시
AI에게 다음과 같이 요청할 수 있습니다:
> "React 최신 버전의 useEffect 사용법을 Context7로 찾아줘"

### Sequential Thinking 사용 예시
복잡한 문제 분석 시:
> "이 복잡한 알고리즘을 Sequential Thinking으로 단계별로 분석해줘"

### Playwright 사용 예시
브라우저 자동화 시:
> "Playwright로 tideWise 웹 인터페이스 테스트 자동화해줘"

### Magic 사용 예시
UI 컴포넌트 생성 시:
> "Magic으로 tideWise용 현대적인 대시보드 컴포넌트 만들어줘"

================================================================================
## 추가 참고사항
================================================================================

### 1. 업데이트 확인
정기적으로 MCP 서버 업데이트를 확인하고 최신 버전을 유지하세요.

**예제 32: npm 패키지 업데이트 확인**
```bash
npm outdated -g
```

### 2. 백업
설정 파일을 정기적으로 백업하세요.

**예제 33: 설정 파일 백업**
```bash
cp ~/.claude.json ~/.claude.json.backup
```

### 3. 성능 최적화
필요하지 않은 MCP 서버는 비활성화하여 성능을 향상시킬 수 있습니다.

### 4. 보안 주의사항
- API 키는 절대 공개 저장소에 커밋하지 마세요
- 환경 변수나 별도 설정 파일로 관리하세요

================================================================================
## 마무리
================================================================================

이 가이드를 통해 SuperClaude와 4가지 핵심 MCP 서버(Context7, Sequential Thinking, Playwright, Magic)를 성공적으로 설치하셨다면, tideWise 프로젝트에서 AI의 강력한 기능들을 모두 활용할 수 있습니다.

각 예제 명령어들은 실제 터미널 환경에서 순서대로 실행하면 되며, 문제가 발생할 경우 문제 해결 가이드를 참조하여 해결할 수 있습니다.

SuperClaude의 모든 기능을 활용하여 효율적인 개발 환경을 구축하세요!

================================================================================