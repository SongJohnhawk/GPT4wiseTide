 ⚡ 단타매매 프로세스 단계별 실행 흐름

  🚀 1단계: 시스템 초기화 (INIT Phase)

  # support/minimal_day_trader.py:86-105
  async def run(self):
      self.is_running = True
      self.stop_requested = False

      # 1.1 시스템 초기화 실행
      if not await self._initialize_systems():
          return False

  세부 프로세스 (1.1):
  - API 연결 초기화: KIS OpenAPI 토큰 발급 및 연결 확인
  - 세션 계좌 관리자 초기화: 실시간 계좌 정보 관리 객체 생성
  - 메모리 관리자 초기화: 거래 후 계좌 상태 갱신 관리
  - 텔레그램 알림 초기화: 실시간 알림 시스템 설정
  - 계좌 정보 조회: 초기 계좌 잔고 및 보유 종목 확인
  - 종목 데이터 로드: 급등종목 데이터 수집 준비

  🔄 2단계: 연결 및 사전 초기화 (CONNECTION Phase)

  # support/minimal_day_trader.py:123-131
  if not await self._pre_day_trading_initialization():
      return False

  세부 프로세스 (2.1-2.6):
  - 2.1 계좌 조회: 서버 연결 확인 (최대 3회 재시도)
  - 2.2 토큰 검증: API 액세스 토큰 유효성 확인
  - 2.3 실시간 계좌 정보 업데이트: 예수금, 주문가능금액, 보유종목 조회
  - 2.4 전날잔고처리: 이전일 보유종목 매도/보유 결정
  - 2.5 급등종목 수집: 한투 API로 실시간 급등종목 수집 (최대 10개)
  - 2.6 텔레그램 시작 알림: 계좌 정보 및 급등종목 정보 전송

  🔁 3단계: 단타매매 순환 실행 (TRADING Phase)

  # support/minimal_day_trader.py:144-201
  while self.is_running and not self.stop_requested:
      cycle_count += 1
      cycle_result = await self._execute_day_trading_cycle(cycle_count)

  각 사이클별 세부 프로세스:

  3.1 급등종목 재수집 (매 사이클마다)

  # support/minimal_day_trader.py:513-527
  if self.algorithm and hasattr(self.algorithm, 'collect_surge_stocks'):
      surge_collection_success = await self.algorithm.collect_surge_stocks(self)

  3.2 계좌 정보 업데이트

  # support/minimal_day_trader.py:529-540
  await self.memory_manager.update_account_info()
  account_info = self.memory_manager.get_account_info()

  3.3 현재 포지션 확인

  # support/minimal_day_trader.py:541-562
  current_positions_list = self.memory_manager.get_positions()
  position_count = len(current_positions_list)

  3.4 매도 신호 처리 (보유 종목 대상)

  # support/minimal_day_trader.py:564-565
  sell_results = await self._process_sell_signals(current_positions)

  매도 처리 세부 단계:
  - 3.4.1 보유 종목별 현재 데이터 조회
  - 3.4.2 AI 알고리즘 분석 (GPT-5 기반)
  - 3.4.3 매도 조건 확인:
    - AI 신호가 'SELL'
    - 손절 조건 (-3% 이하)
    - 익절 조건 (+2% 이상)
  - 3.4.4 매도 주문 실행 및 결과 기록

  3.5 매수 신호 처리 (신규 종목 대상)

  # support/minimal_day_trader.py:567-575
  if position_count < self.max_positions:
      buy_results = await self._process_buy_signals(account_info, current_positions)

  매수 처리 세부 단계:
  - 3.5.1 매수 가능 현금 확인 (최소 10,000원)
  - 3.5.2 단타 매수 후보 종목 선별 (급등종목 기반)
  - 3.5.3 종목별 분석 (최대 10개):
    - 현재가, 전일대비, 거래량 조회
    - AI 알고리즘 분석 (신뢰도 포함)
    - 매수 조건 확인 (신호='BUY' & 신뢰도 > 임계값)
  - 3.5.4 매수 주문 실행 및 결과 기록

  3.6 사이클 결과 정리 및 전송

  # support/minimal_day_trader.py:577-588
  cycle_result = {
      'cycle_number': cycle_number,
      'timestamp': start_time.strftime('%H:%M:%S'),
      'account_balance': account_info.get('cash_balance', 0),
      'position_count': position_count,
      'sell_results': sell_results,
      'buy_results': buy_results,
      'session_stats': self.memory_manager.get_session_stats()
  }

  3.7 사이클 간격 대기

  # support/minimal_day_trader.py:187-201
  dynamic_interval = self._get_cycle_interval()
  await self._safe_sleep(dynamic_interval, f"사이클 {cycle_count + 1}")

  동적 사이클 간격:
  - 기본 3분 (180초) 간격
  - 시간대별 동적 조정 가능
  - 오류 발생 시 30초 대기 후 재시도

  🏁 4단계: 종료 처리 (FINALIZATION)

  # support/minimal_day_trader.py:203-221
  await self._finalize_day_trading()

  # finally 블록에서:
  self.is_running = False
  if self.account_manager:
      self.account_manager.end_session()

  종료 처리 세부 단계:
  - 4.1 최종 계좌 상태 조회 및 기록
  - 4.2 세션 종료 처리
  - 4.3 텔레그램 종료 알림 전송
  - 4.4 리소스 정리 및 로그 기록

  ⏱️ 실제 실행 시간 및 주기

  - 초기화: 약 10-15초
  - 각 사이클: 약 3-5분 (분석 시간 + 3분 대기)
  - 일일 총 사이클: 약 100-130회 (09:05-15:20 기준)
  - 매도 분석: 보유 종목당 약 2-3초
  - 매수 분석: 급등종목 10개당 약 20-30초

● 🎯 핵심 특징 및 운영 원리

  🔄 순환 구조

  - 무한 루프: while self.is_running 조건으로 지속 실행
  - 중단 조건: 파일 기반 중단 신호, 시간 초과, 서버 오류 시 자동 종료
  - 오류 복구: 개별 사이클 오류 시 30초 대기 후 다음 사이클 계속 진행

  🧠 AI 기반 분석

  - GPT-5 엔진: 실시간 종목 분석 및 매매 신호 생성
  - 신뢰도 기반: 매수 결정 시 AI 신뢰도 임계값 적용
  - 상황 인식: 보유 종목(매도 분석) vs 신규 종목(매수 분석) 구분

  📊 리스크 관리

  - 포지션 제한: 최대 5개 종목 동시 보유
  - 자동 손절: -3% 손실 시 자동 매도
  - 자동 익절: +2% 수익 시 자동 매도
  - 자금 관리: 종목당 7% 이하 투자 (설정 가능)